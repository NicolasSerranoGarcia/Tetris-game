*FILE CREATED 09/04/2025*


# TODO 

[X] Implement a way to render distinct scenes. To be able to call all the methods of the child classes with the same pointer, all the child clases (opScene, mainScene...)
are handled by the same three methods (or more if there are common paterns), render, update and clear. Render will handle all the logic inside it with the help of C style
functions and other classes like Font or Button (or Figure for tetris blocks in the future maybe). This way, the main file (this) will just consist of a finite state machine/where I update the global pointer by checking certain key points like a pressed button or an edge case like the player lost. 

[] Create a new class to handle Images with the image library. Use it for easy loading like Font. Make it posible to load an image inside a button (like font). 

[X] Create a new  RPosition constant that enables you to place something relative to a specific object (It recieves the x, y, w, h and enables a REL_LEFT for example)

[] add sound maybe?

[] handle initialization errors of classes

[X] Maybe change the structure of the OpScreen render and handle event so as to only declare 1 time the buttons and the objects that need the events

[X] change the constructor of Font so that it allows entering x and y to fill the atributes

[/] add to all objects the possibility of setting them relative to an object

[] Add a method to the class Font called Fit or smth like that to change the font size to fit the dimensions of a given container. 

[] also add a way to center the font in the center of the container

[] Find a way to open the settings scene as a popup (the mainscene still shows on the back) and when the user returns, there is no chnge (the game froze)

[] find a pause image that is transparent

[] Implement some sort of velocity to the figures

[] make it possible to "slow down" the figure when it is falling without interrupting the render of the scene

[] Complete all the constructors for each figure so that they are "usable".

[] implement an algorithm (method update) in Figure that changes the position of the figure given an event and the previous state

[] implement an algorythm to check if a figure can move to the left or to the right

[] implement the logic for the figure moveing downwards

[] The outline of the squares in the mainscene is not taken into account and it visually seems like the figure is not correctly positioned when you are on the extremes

[] change the deleteBlocks() method from FIgure:: so that it has a better syntax (not i--)

[] When a figure is rotated and then moved, it updates as if the figure angle is 0. Just create a template to update the blocks depending on the angle for all the blocks.

[] the stick rotation is somewhat strange in the screen. Something happens when udpating the pixels

[] when the figures are rotated, the can faze through the walls. Fix that