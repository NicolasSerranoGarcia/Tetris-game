*FILE CREATED 09/04/2025*


# TODO 

[X] Implement a way to render distinct scenes. To be able to call all the methods of the child classes with the same pointer, all the child clases (opScene, mainScene...)
are handled by the same three methods (or more if there are common paterns), render, update and clear. Render will handle all the logic inside it with the help of C style
functions and other classes like Font or Button (or Figure for tetris blocks in the future maybe). This way, the main file (this) will just consist of a finite state machine/where I update the global pointer by checking certain key points like a pressed button or an edge case like the player lost. 

[X] Create a new class to handle Images with the image library. Use it for easy loading like Font. Make it posible to load an image inside a button (like font). 

[X] Create a new  RPosition constant that enables you to place something relative to a specific object (It recieves the x, y, w, h and enables a REL_LEFT for example)

[] add sound maybe?

[] handle initialization errors of classes

[X] Maybe change the structure of the OpScreen render and handle event so as to only declare 1 time the buttons and the objects that need the events

[X] change the constructor of Font so that it allows entering x and y to fill the atributes

[/] add to all objects the possibility of setting them relative to an object

[] Add a method to the class Font called Fit or smth like that to change the font size to fit the dimensions of a given container. 

[] also add a way to center the font in the center of the container

[X] Find a way to open the settings scene as a popup (the mainscene still shows on the back) and when the user returns, there is no chnge (the game froze)

[X] find a pause image that is transparent

[X] Implement some sort of velocity to the figures

[X] make it possible to "slow down" the figure when it is falling without interrupting the render of the scene

[X] Complete all the constructors for each figure so that they are "usable".

[X] implement an algorithm (method update) in Figure that changes the position of the figure given an event and the previous state

[X] implement an algorythm to check if a figure can move to the left or to the right

[X] implement the logic for the figure moveing downwards

[X] change the deleteBlocks() method from FIgure:: so that it has a better syntax (not i--) - changed: not necessary

[X] When a figure is rotated and then moved, it updates as if the figure angle is 0. Just create a template to update the blocks depending on the angle for all the blocks.

[X] the stick rotation is somewhat strange in the screen. Something happens when udpating the pixels

[X] when the figures are rotated, the can faze through the walls. Fix that

[X] The class names of the figures are not well placed. FigZ, FigL... 

[X] implement colision details of the figures when getting to the bottom

[X] Add collision when figures move horizontally while mantaining freedom of movement

[X] MANTAINANCE: add comments, clear code, present the classes...

[X] Make widths and heights relative to the ones in the screen

[X] Cleaned files: constants.cc/.h , Screen.cc/.h, Button.cc/.h, Image.cc/.h, Font.cc/.h, Block.cc/.h, Figure.cc/.h, all child figures, Scene.cc/.h, mainScene and opScene

[X] method in Image to set one instance as a background

[X] add the curScene as a paraemeter on Scene::render() - changed: not necessary

[X] add the pointer mainScene as a global parameter, to save the progress when the settings is running - changed: added as a settingsScene atribute

[X] create the pointing system of the cleared blocks

[X] add a figure visualizer for the following 3 figures

[X] add the settings scene

[X] add the death case

[X] when the settings is opened don't show the figures

[X] fix the random figures so that one figure doesn't repeat

[X] add shadow to the figures

[X] add hard drop to the figures with default spacebar key

[X] add points, lines and level count that afects speed

[X] add the mechanic of saving a figure

[X] add a last event variable to prevent multiple ke y pressing (when the user keeps the space bar pressed, succesive figures get fast dropped) - changed: by checking if the user lifted the finger from te fast drop key I was able to force it

[] make sure that auziliary classes call things like freeSurface() and that scenes and stuff call the destructors of the aux classes they use

[X] Handle the death case in a separate method

[X] make it so that the rotation key is discrete

[X] trigger a screen to ak for the input. It is more visual for the user

[] make some type of user save info. Save binds, best games...

[X] the shadow is not "pushed" when the figure gets out of bounds

[X] add the space bar the same way as rotate key (event.key.pressed)

[/] add visuals like a timer when starting or the points won from a line clear

[/] The outline of the squares in the mainscene is not taken into account and it visually seems like the figure is not correctly positioned when you are on the extremes:
I think I will fix it when I add textures, doing it now is a temporal solution bc I will end up deleting it anyways

[X] implement rotation details of the stick figure

[X] implement a slight color inside the shadow figure to better distinguish it

[X] Put a title in the settings for the keybind part

[/] implement scrolling in the settings

[X] implement an X button to close the settings manually

[] implement a button to return to the opening scene

[X] implement a button to go to your socials

[X] implement the sound slidebar for the future

[X] put a reference for what the keybind stands for on the left

[] Put some button to let the user log in

[] put a settings button on the opening scene

[X] blur the background on the settings: Impossible

[X] Make settings a texture instead of a rectangle

[X] The keybind buttons actual position does not move with the texture when scrolling

[X] put the change keybind message in the actual button

[X] maybe add a event listener but that when a button is pressed, it activates a flag for that button so that in the render you can put all the
things that now live in the landleEvents. This way you have all the render in the mainScene, like the renderKeyBindChange. This way maybe you can also remove the pollevent from handleEvents.
You check if there is a button pressed and if so you make it not possible to click on another one. If a key event is gotten, you put that as the key of the button. 

[X] add a manual slider to the settings

[X] clicking on another button keybind should change the the button tht is currently asking for a key

[X] change the amount of scrolling of the settings  when moving it by clicking the slider to be the same as the other one

[] maybe put an image on the slider of the sound

[X] create a temporary sound slider that is used only for the logic. The atribute should not be touched

[X] create a global sound var 

[X] if the user wants to add a keybind that is already being used, do something

[X] add social icons

[X] reverse the counter (3,2,1)

[X] check in advance if fetching a figure makes the player loose and act consequently: No, changed aproach

[X] create loose scene

# CHECKPOINT:

- Chores left:

[/] Add sound: when clearing a line (explosion from the escapists), when opening the settings and on the counter (sound from jumping on retro games)
[X] Update: Music needs to be added still
[] Update: Choose better sound effects. You can also implement a "radio" for music

[] Do mantainance on all the code. FInish documentation

[] End Readme and add an ERaser diaggram on project structure. On readme: Explain what is SDL, what offers, how is your program stablish

[] Maybe: Implement account sign in. If it is possible, add a top 5 games on the opScene. Explore SDL_net

[] Add style with textures and pixel art

[] fix the death case: Sometimes it triggers when it shouldnt. 